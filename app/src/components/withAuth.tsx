'use client';\n\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useRouter } from 'next/navigation';\nimport React, { ComponentType, useEffect } from 'react';\n\nexport function withAuth<P extends object>(WrappedComponent: ComponentType<P>) {\n  const AuthComponent = (props: P) => {\n    const { user, isLoading, token } = useAuth();\n    const router = useRouter();\n\n    useEffect(() => {\n      // Se não está carregando e não há usuário/token, redireciona para login\n      if (!isLoading && !token) {\n        router.replace('/login');\n      }\n    }, [isLoading, token, router]);\n\n    // Exibe um loader enquanto o estado de autenticação é verificado\n    if (isLoading || !token) {\n      return (\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <p>Carregando...</p>\n        </div>\n      );\n    }\n\n    // Se autenticado, renderiza o componente solicitado\n    return <WrappedComponent {...props} />;\n  };\n\n  AuthComponent.displayName = `withAuth(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`;\n\n  return AuthComponent;\n}\n 